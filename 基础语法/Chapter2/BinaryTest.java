package Chapter2;

public class BinaryTest {
    public static void main(String[] args) {
        int n1 = 0b10101; // 二进制
        int n2 = 1010; // 十进制
        int n3 = 0172; // 八进制
        int n4 = 0x10ac; // 十六进制a表示10，f表示15
        System.out.println(n1 + "\t" + n2 + "\t" + n3 + "\t" + n4 + "\t" );
        System.out.println("==============================");

        // ^(按位异或)、|(按位或)、&(按位与)，计算机运算时是按照补码运算，结果显示却是原码显示。
        /*
         * 2的原码是 00000000 00000000 00000000 00000010
         * 2的补码是 00000000 00000000 00000000 00000010
         * 
         * 3的原码是 00000000 00000000 00000000 00000011
         * 3的补码是 00000000 00000000 00000000 00000011
         * 
         * 2&3 :00000000 00000000 00000000 00000011
         *      00000000 00000000 00000000 00000010
         * 结果 :00000000 00000000 00000000 00000010 该结果是补码
         * 显示为原码: 00000000 00000000 00000000 00000010(2)
         * 
         */
        System.out.println("2&3的结果是" + (2&3)); // 结果为2

        /*
         * -2的原码是 10000000 00000000 00000000 00000010
         * -2的反码是 11111111 11111111 11111111 11111101
         * -2的补码是 11111111 11111111 11111111 11111110
         * 
         * ~-2 :11111111 11111111 11111111 11111110
         * 结果 :00000000 00000000 00000000 00000001 该结果是补码
         * 原码显示: 00000000 00000000 00000000 00000001(1)
         * 
         */
        System.out.println("~-2的结果是" + (~-2)); // 结果为1

        /*
         * 2的原码是 00000000 00000000 00000000 00000010
         * 2的补码是 00000000 00000000 00000000 00000010
         * 
         * ~2  :00000000 00000000 00000000 00000010
         * 结果 :11111111 11111111 11111111 11111101 该结果是补码
         * 该结果为负数,因此先转化为反码: 11111111 11111111 11111111 11111100
         * 再将反码转化为原码: 10000000 0000000 0000000 00000011(-3)
         * 
         */
        System.out.println("~2的结果是" + (~2));  // 结果为-3

        /*
         * 2的原码是 00000000 00000000 00000000 00000010
         * 2的补码是 00000000 00000000 00000000 00000010
         * 
         * 3的原码是 00000000 00000000 00000000 00000011
         * 3的补码是 00000000 00000000 00000000 00000011
         * 
         * 2|3 :00000000 00000000 00000000 00000011
         *      00000000 00000000 00000000 00000010
         * 结果 :00000000 00000000 00000000 00000011 该结果是补码
         * 显示为原码: 00000000 00000000 00000000 00000011(3)
         * 
         */
        System.out.println("2|3的结果是" + (2|3)); // 结果为3

        /*
         * 2的原码是 00000000 00000000 00000000 00000010
         * 2的补码是 00000000 00000000 00000000 00000010
         * 
         * 3的原码是 00000000 00000000 00000000 00000011
         * 3的补码是 00000000 00000000 00000000 00000011
         * 
         * 2^3 :00000000 00000000 00000000 00000011
         *      00000000 00000000 00000000 00000010
         * 结果 :00000000 00000000 00000000 00000001 该结果是补码
         * 显示为原码: 00000000 00000000 00000000 00000001(1)
         * 
         */
        System.out.println("2^3的结果是" + (2^3)); // 结果为1
        System.out.println("======================");


        // >>、<<、>>>、
        /*
         * 1的补码是 ...00000001 右移后 ...00000000 舍弃了01
        */
        System.out.println("1>>2的结果是" + (1>>2)); // 结果为0

        /*
         * 1的补码是 ...00000001 左移后 ...00000100
        */
        System.out.println("1<<2的结果是" + (1<<2)); // 结果为4

        /*
         * -12的原码: 10000000 00000000 00000000 00001100
         * -12的反码: 11111111 11111111 11111111 11110011
         * -12的补码: 11111111 11111111 11111111 11110100
         * 右移4后为: 11111111 11111111 11111111 11111111 补码结果
         * 将结果转化为反码: 11111111 11111111 11111111 11111110
         * 将结果转化为原码: 10000000 00000000 00000000 00000001 (-1)
        */
        System.out.println("-12>>4的结果是" + (-12>>4)); // 结果为-1

    }
}
