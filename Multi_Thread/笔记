# 多线程知识

## 进程(Process)与线程(Thread)
- 进程是程序的一次执行过程, 是一个动态概念, 是系统资源分配的单位
- 在一个进程中可以包含有多个线程, 一个进程至少有一个线程, 线程是CPU调度和执行的单位
- 注意: 很多线程是模拟出来的, 真正的多线程是指多个CPU, 即多核, 如服务器。如果模拟出来的多线程, 即再一个CPU下, 在同一时间点CPU只能执行一个代码, 因为切换很快, 所以就有同时执行的错觉。

### 线程
- 线程是独立执行的路径。
- main()称之为主线程, 为系统的入口, 用于执行整个程序。
- 在一个进程中如果开辟了多个线程, 线程的运行由调度器安排调度, 调度器与操作系统密切相关, 线程的先后顺序不能人为干预。
- 对同一份资源操作时, 会存在资源抢夺的问题, 此时需要加入并发控制(排队)。
- 线程会带来额外开销, 如CPU调度时间, 并发控制开销。
- 每个线程在自己的工作内存交互, 内存控制不当会造成数据不一致。

### 进程的创建
- 方法一: 继承Thread类(Demo1)
    - 多线程网图下载(Demo2)
    - 执行多线程需要创建多个对象
- 方法二: 实现Runnable接口(Demo3)
    - 可以对同一个runnable接口对象执行多个线程
    - 推荐使用: 避免了单继承的局限性, 灵活方便, 同一个对象可以被多个线程使用。

### 并发问题
- 对于同一个对象来说, 内部属性是唯一的, 如果多个线程对同一个对象进行操作内部属性则可能会出现线程不安全。
- Demo4: 三个人抢票, 当剩余票数等于0时, 则不再抢票了。
    - 当三个线程同时进入到run中时, 都会执行循环抢票, 但可能会出现两个人抢到同一张票, 还可能会出现有人拿到第-1张票
    - 这就是线程对同一个对象的属性进行了操作导致, 线程不安全。

## Lambda表达式
- Lambda表达式使用的优势
    - 避免匿名内部类定义过多
    - 可以让你的代码看起来更简洁
    - 去掉了没有意义的代码部分

- 函数式接口定义：
    - 任何接口，如果只包含有唯一一个抽象方法，那么它就是一b个函数式子接口。
    - 对于函数式子接口, 我们可以通过lambda表达式类创建该接口的对象。

- Demo5: 推导lambda表达式全过程。第6，7步可以看出，只需要专注内部重写方法的实现